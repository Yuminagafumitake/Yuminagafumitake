# Python构造函数详解与示例

# =============================================================================
# 1. 基本构造函数 __init__
# =============================================================================

class Person:
    """基本的Person类，演示构造函数的基本用法"""
    
    def __init__(self, name, age):
        """
        构造函数，创建对象时自动调用
        参数:
            name: 姓名
            age: 年龄
        """
        self.name = name  # 实例属性
        self.age = age    # 实例属性
        print(f"创建了一个Person对象: {name}, {age}岁")
    
    def introduce(self):
        return f"我是{self.name}，今年{self.age}岁"

# 使用构造函数创建对象
print("=== 基本构造函数示例 ===")
person1 = Person("张三", 25)
person2 = Person("李四", 30)
print(person1.introduce())
print(person2.introduce())
print()

# =============================================================================
# 2. 带默认参数的构造函数
# =============================================================================

class Student:
    """学生类，演示带默认参数的构造函数"""
    
    def __init__(self, name, age, grade="未分配", school="未知学校"):
        """
        带默认参数的构造函数
        如果不提供grade和school参数，会使用默认值
        """
        self.name = name
        self.age = age
        self.grade = grade
        self.school = school
    
    def get_info(self):
        return f"学生: {self.name}, {self.age}岁, {self.grade}班, {self.school}"

print("=== 带默认参数的构造函数 ===")
# 只提供必需参数
student1 = Student("王五", 16)
print(student1.get_info())

# 提供所有参数
student2 = Student("赵六", 17, "高三(1)", "实验中学")
print(student2.get_info())

# 部分使用默认参数
student3 = Student("孙七", 15, "初三(2)")
print(student3.get_info())
print()

# =============================================================================
# 3. 构造函数中的数据验证
# =============================================================================

class BankAccount:
    """银行账户类，演示构造函数中的数据验证"""
    
    def __init__(self, account_holder, initial_balance=0):
        """
        构造函数，包含数据验证
        """
        # 验证账户持有人姓名
        if not isinstance(account_holder, str) or len(account_holder.strip()) == 0:
            raise ValueError("账户持有人姓名不能为空")
        
        # 验证初始余额
        if not isinstance(initial_balance, (int, float)) or initial_balance < 0:
            raise ValueError("初始余额必须是非负数")
        
        self.account_holder = account_holder.strip()
        self.balance = float(initial_balance)
        self.transaction_history = []
        
        # 记录账户创建
        self.transaction_history.append(f"账户创建，初始余额: {self.balance}")
        print(f"为 {self.account_holder} 创建账户，余额: {self.balance}")
    
    def get_balance(self):
        return self.balance
    
    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            self.transaction_history.append(f"存款: +{amount}, 余额: {self.balance}")
        else:
            raise ValueError("存款金额必须大于0")

print("=== 构造函数数据验证示例 ===")
try:
    account1 = BankAccount("张先生", 1000)
    print(f"账户余额: {account1.get_balance()}")
    
    # 尝试创建无效账户
    account2 = BankAccount("", 500)  # 这会抛出异常
except ValueError as e:
    print(f"错误: {e}")
print()

# =============================================================================
# 4. 类属性 vs 实例属性
# =============================================================================

class Car:
    """汽车类，演示类属性和实例属性的区别"""
    
    # 类属性 - 所有实例共享
    total_cars = 0
    wheels = 4  # 所有汽车都有4个轮子
    
    def __init__(self, brand, model, color):
        """构造函数，设置实例属性"""
        # 实例属性 - 每个实例独有
        self.brand = brand
        self.model = model
        self.color = color
        
        # 每创建一个实例，类属性total_cars增加1
        Car.total_cars += 1
        self.car_id = Car.total_cars
        
        print(f"第{self.car_id}辆车已生产: {brand} {model} ({color})")
    
    def get_info(self):
        return f"车辆{self.car_id}: {self.brand} {self.model}, 颜色: {self.color}, 轮子数: {self.wheels}"
    
    @classmethod
    def get_total_cars(cls):
        return cls.total_cars

print("=== 类属性与实例属性示例 ===")
car1 = Car("丰田", "卡罗拉", "白色")
car2 = Car("本田", "雅阁", "黑色")
car3 = Car("大众", "帕萨特", "银色")

print(f"总共生产了 {Car.get_total_cars()} 辆车")
print(car1.get_info())
print(car2.get_info())
print()

# =============================================================================
# 5. 继承中的构造函数
# =============================================================================

class Animal:
    """动物基类"""
    
    def __init__(self, name, species):
        self.name = name
        self.species = species
        print(f"创建动物: {name} ({species})")
    
    def make_sound(self):
        return "动物发出声音"

class Dog(Animal):
    """狗类，继承自Animal"""
    
    def __init__(self, name, breed, age):
        """
        子类构造函数
        使用super()调用父类构造函数
        """
        # 调用父类构造函数
        super().__init__(name, "犬科")
        
        # 添加子类特有的属性
        self.breed = breed
        self.age = age
        print(f"这是一只{age}岁的{breed}")
    
    def make_sound(self):
        return f"{self.name}在汪汪叫！"
    
    def get_info(self):
        return f"狗狗: {self.name}, 品种: {self.breed}, {self.age}岁"

class Cat(Animal):
    """猫类，继承自Animal"""
    
    def __init__(self, name, color, indoor=True):
        super().__init__(name, "猫科")
        self.color = color
        self.indoor = indoor
        location = "室内" if indoor else "室外"
        print(f"这是一只{color}的{location}猫")
    
    def make_sound(self):
        return f"{self.name}在喵喵叫！"

print("=== 继承中的构造函数示例 ===")
dog1 = Dog("旺财", "金毛", 3)
cat1 = Cat("小咪", "橘色", True)

print(dog1.get_info())
print(dog1.make_sound())
print(cat1.make_sound())
print()

# =============================================================================
# 6. 复杂构造函数示例 - 游戏角色
# =============================================================================

class GameCharacter:
    """游戏角色类，演示复杂的构造函数"""
    
    # 类属性：职业配置
    JOB_CONFIGS = {
        "战士": {"hp": 120, "mp": 30, "attack": 15, "defense": 12},
        "法师": {"hp": 80, "mp": 100, "attack": 20, "defense": 6},
        "盗贼": {"hp": 100, "mp": 50, "attack": 18, "defense": 8}
    }
    
    def __init__(self, name, job="战士", level=1, **kwargs):
        """
        复杂的构造函数
        参数:
            name: 角色名称
            job: 职业
            level: 等级
            **kwargs: 其他可选属性
        """
        # 验证职业是否有效
        if job not in self.JOB_CONFIGS:
            raise ValueError(f"无效职业: {job}. 可选职业: {list(self.JOB_CONFIGS.keys())}")
        
        # 基本属性
        self.name = name
        self.job = job
        self.level = level
        
        # 根据职业设置基础属性
        config = self.JOB_CONFIGS[job]
        self.max_hp = config["hp"] + (level - 1) * 10
        self.max_mp = config["mp"] + (level - 1) * 5
        self.attack = config["attack"] + (level - 1) * 2
        self.defense = config["defense"] + (level - 1) * 1
        
        # 当前生命值和魔法值等于最大值
        self.current_hp = self.max_hp
        self.current_mp = self.max_mp
        
        # 处理额外属性
        self.equipment = kwargs.get("equipment", [])
        self.skills = kwargs.get("skills", [])
        self.gold = kwargs.get("gold", 100)
        
        print(f"创建角色: {name} (Lv.{level} {job})")
        print(f"  生命值: {self.current_hp}/{self.max_hp}")
        print(f"  魔法值: {self.current_mp}/{self.max_mp}")
        print(f"  攻击力: {self.attack}, 防御力: {self.defense}")
        
        if self.equipment:
            print(f"  装备: {', '.join(self.equipment)}")
        if self.skills:
            print(f"  技能: {', '.join(self.skills)}")
        print(f"  金币: {self.gold}")
    
    def get_status(self):
        return f"{self.name} (Lv.{self.level} {self.job}) - HP: {self.current_hp}/{self.max_hp}, MP: {self.current_mp}/{self.max_mp}"

print("=== 复杂构造函数示例 - 游戏角色 ===")

# 创建不同的角色
warrior = GameCharacter("亚瑟", "战士", 5, equipment=["铁剑", "皮甲"], gold=500)
print()

mage = GameCharacter("梅林", "法师", 3, skills=["火球术", "冰箭"], equipment=["法杖"])
print()

thief = GameCharacter("罗宾", "盗贼", 4, skills=["偷窃", "暗杀"], gold=800)
print()

# 显示角色状态
print("=== 角色状态 ===")
print(warrior.get_status())
print(mage.get_status())
print(thief.get_status())

# =============================================================================
# 7. 构造函数的注意事项和最佳实践
# =============================================================================

print("\n=== 构造函数最佳实践总结 ===")
print("""
1. 构造函数的作用:
   - 初始化对象的属性
   - 执行对象创建时需要的设置
   - 验证输入参数的有效性

2. 参数设计原则:
   - 必需参数放在前面
   - 可选参数使用默认值
   - 使用**kwargs处理额外参数

3. 数据验证:
   - 在构造函数中验证参数
   - 使用raise抛出有意义的异常
   - 确保对象创建后处于有效状态

4. 继承中的构造函数:
   - 使用super().__init__()调用父类构造函数
   - 先调用父类构造函数，再设置子类属性

5. 类属性 vs 实例属性:
   - 类属性: 所有实例共享
   - 实例属性: 每个实例独有
   - 在构造函数中通过self设置实例属性
""")
